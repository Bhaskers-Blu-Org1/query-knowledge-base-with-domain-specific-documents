[{"id":"91d1eb33.b885c8","type":"template","z":"deb0d57.1c46528","name":"HTML","field":"payload","fieldType":"msg","format":"handlebars","syntax":"plain","template":"<!DOCTYPE html>\n\n\n<html>\n\n<head>\n  <title>Robot Demo</title>\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>\n  <meta charset=\"utf-8\">\n\n  <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\"></script>\n  <script src=\"http://code.jquery.com/ui/1.12.1/jquery-ui.min.js\"></script>\n\n  <link rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">\n  <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n\n  <script src=\"https://d3js.org/d3.v4.min.js\"></script>\n  <script src=\"http://d3js.org/d3-selection-multi.v1.js\"></script>\n  \n  <style>\n    .body\n    {\n        height: 600px;\n        width:960px;\n        margin-left:auto;\n        margin-right:auto;\n    }\n\n    .header {\n      font-size: 22px; \n      height:40px; \n      width: 960px;\n      background-color: #1E90FF;\n      color: white;\n      padding-left:5px;\n    }\n\n    subHeader {\n      font-size: 20px;\n      font-family: \"Arial\";\n      pointer-events: none;\n      color: white;\n    }\n\n    .panel {\n      width: 960px;\n      /*border:1px solid black;*/\n    }\n\n    .searchBox {\n      width: 850px;\n      display: inline-block;\n      /*border:1px solid black;*/\n    }\n\n    .searchBox input{\n      width: 850px;\n      height: 37px;\n    }\n\n    .searchButton {\n      float: right;\n      /*width: 150px;*/\n      /*display: inline-block;*/\n      /*border:1px solid black;*/\n    }\n\n    .chartDiv {\n      border:1px solid black; \n      width: 960px; \n      height:490px; \n      visibility:hidden;\n    }\n\n    .chartArea {\n      width: 960px; \n      height:450px; \n    }\n\n    .chartHeader{\n      background-color: #F5F5F5; \n      height:30px; \n      width:958px;\n      text-align: right;\n    }\n\n    .labelHeading {\n      font: 18px sans-serif;\n      color: black;\n      float: left;\n      padding-left:10px;\n      padding-top:5px;\n      width: 350px;\n      text-align: left;\n    }\n\n    .arrowIcon{\n      float:left;\n      padding-top:2px;\n      width: 100px;\n      margin-left: 50px;\n      visibility: hidden;\n    }\n\n    .arrowIcon input {\n      align:center; \n      border-radius: 50%; \n      background-color: #C0C0C0;\n      border: none;\n    }\n   \n    .insightsOption {\n      font: 16px sans-serif;\n      width: 400px;\n      margin-left: 8px;\n      padding-top:5px;\n      float: left;\n      visibility: hidden;\n    }\n\n    .insightsOption select {\n      width: 400px;\n    }\n  \n    .goIcon{\n      float:right;\n      padding-top:2px;\n      margin-right: 10px;\n      visibility: hidden;\n    }\n\n    .goIcon input {\n      align:center; \n      border-radius: 50%; \n      background-color: #C0C0C0;\n      border: none;\n    }\n\n    .closeIcon{\n      float:right;\n      padding-top:2px;\n      margin-right: 15px;\n      visibility: hidden;\n    }\n\n    .closeIcon input {\n      align:center; \n      border-radius: 50%; \n      background-color: #C0C0C0;\n      border: none;\n    }\n\n    .links line {\n      stroke: #999;\n      stroke-opacity: 1.6;\n    }\n\n    .nodes circle {\n      stroke: #fff;\n      stroke-width: 1.5px;\n    }\n\n    text {\n      font: 12px sans-serif;\n      pointer-events: none;\n      color: red;\n    }\n\n    .label {\n      font: 12px sans-serif;\n      pointer-events: none;\n      color: red;\n    }\n  </style>  \n</head>\n\n<script>\n  //Provide node-red base url as mentioned in documentation\n  var NODERED_BASE_URL = 'reddytrackiot.eu-gb.mybluemix.net';\n  var NODERED_websocket_path = '/ws/abc';\n  var websocketURL = \"ws://\" + NODERED_BASE_URL + NODERED_websocket_path;\n\n  $(document).ready(function() {  \n\n    if (NODERED_BASE_URL === '') {\n      alert(\"Node-red Base URL is not provided.\")\n    }\n\n    var storedArtifact, storedData;\n\n    $(\"#button\").attr(\"disabled\", true);\n    $('#search').val('');\n    $('#search').on('keyup', function() {\n        $(\"#button\").attr(\"disabled\", false); \n    });\n\n    $(\"#chart\").css(\"visibility\", \"visible\");\n\n    message = {\"cmd\":\"graph\"};\n    send(JSON.stringify(message));\n\n    //Once socket will work, following function call is not required from here\n    //showArtifact();\n\n    // $(\"#arrowButton\").attr(\"disabled\", false);\n  });\n\n  //Socket communication\n  var socket = new  WebSocket(websocketURL);\n      \n  socket.onopen = function() {\n    var message = {\n      'cmd': 'Client connected'\n    };\n    socket.send(JSON.stringify(message));\n  };\n      \n  socket.onclose = function(){\n    alert(\"Socket Closed!\");\n    console.log('Connection closed');\n  };\n\n  socket.onerror = function(error) {\n    alert(\"Socket Error!\");\n    console.log('Error detected: ' + error);\n  };\n      \n  socket.onmessage = function(e) {\n    var server_message = e.data;\n    responseObject = JSON.parse(server_message);\n       \n    if (responseObject[\"forcmd\"] == \"graph\"){\n        showArtifact(responseObject[\"response\"]);\n    }\n\n    // if (responseObject[\"forCmd\"] == \"uiquery\"){\n    //     showArtifact(responseObject[\"response\"]);\n    // }\n    if (responseObject[\"forcmd\"] == \"uiquery\"){\n        drawUpdatedNetworkGraph(responseObject[\"response\"]);\n    }\n  };\n    \n  function send(msg) {\n    wait_for_socket_connection(socket, function() {\n      socket.send(msg);\n    });\n  };\n    \n  function wait_for_socket_connection(socket, callback){\n    setTimeout(\n      function(){\n        if (socket.readyState === 1) {\n          if(callback !== undefined){\n            callback();\n          }\n          return;\n        } else {\n          wait_for_socket_connection(socket,callback);          \n        }\n      }, 5);\n  };\n\n  //Function to search all defects/testcases/requirements to start visualization for more insight\n  function doSearch() {\n\n    var message;\n    // var val = $( \"#search\" ).val().toLowerCase();\n    // alert(val);\n    var val = $( \"#search\" ).val();\n    $(\"#chart\").css(\"visibility\", \"visible\"); \n\n    $(\".labelHeading\").text(\"Query Response >\");\n    $(\".closeIcon\").css(\"display\", \"block\");\n    $(\".closeIcon\").css(\"visibility\", \"visible\");\n\n    message = {\"cmd\":\"uiquery\", \"question\":val};\n    send(JSON.stringify(message));\n\n    //drawUpdatedNetworkGraph(storedData);\n  }\n\n  \n  // Function to trigger - add more insights option and to draw bubble chart \n  // for all defects/testcases/requirements according to the chosen option\n  function showArtifact(data) {\n    //var artifact = data.name;\n    \n    $(\".labelHeading\").text(\"Document Information >\");\n   \t// $(\".arrowIcon\").css(\"visibility\", \"hidden\");\n    $(\".closeIcon\").css(\"display\", \"none\");\n\n    //storedArtifact = artifact;\n    storedData = data;\n    drawNetworkGraph(data);\n  }\n  \n    var networkChartData = {\n      \"nodes\": [\n          {\"id\": \"D210\", \"group\":1, \"description\": \"Description\"},\n          {\"id\": \"TC118\", \"group\":2},\n          {\"id\": \"TC115\", \"group\":2},\n          {\"id\": \"TC10\", \"group\":2},\n          {\"id\": \"R251\", \"group\":3},\n          {\"id\": \"R101\", \"group\":3}\n      ],\n      \"links\": [\n          {\"source\": \"D210\", \"target\": \"TC118\", \"value\": 10},\n          {\"source\": \"D210\", \"target\": \"TC115\", \"value\": 5},\n          {\"source\": \"D210\", \"target\": \"TC10\", \"value\": 1},\n          {\"source\": \"TC118\", \"target\": \"R251\", \"value\": 10},\n          {\"source\": \"TC115\", \"target\": \"R251\", \"value\": 10},\n          {\"source\": \"TC10\", \"target\": \"R101\", \"value\": 10},\n          {\"source\": \"TC10\", \"target\": \"R251\", \"value\": 5}\n      ]\n    }\n\n  // Function to draw a network graph among artifacts\n  function drawNetworkGraph(graph){\n\n      // remove previous chart if any\n      d3.selectAll('svg').remove();\n\n      //graph = networkChartData;\n      var width=940,\n          height=430;\n\n      var linkColors = [\"green\", \"cyan\"];\n\n      var svg = d3.select(\"#chartArea\").append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n\n\n      // svg.append('defs').append('marker')\n      //   .attrs({'id':'arrowhead',\n      //       'viewBox':'-0 -5 10 10',\n      //       'refX':20,\n      //       'refY':0,\n      //       'orient':'auto',\n      //       'markerWidth':13,\n      //       'markerHeight':13,\n      //       'xoverflow':'visible'})\n      //   .append('svg:path')\n      //   .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n      //   .attr('fill', '#4169E1')\n      //   .style('stroke','none');\n\n\n      var color = d3.scaleOrdinal(d3.schemeCategory20);\n\n      var simulation = d3.forceSimulation()\n          .force(\"link\", d3.forceLink().id(function(d) { return d.id; }).distance(180).strength(0.1))\n          .force(\"charge\", d3.forceManyBody())\n          .force(\"center\", d3.forceCenter(width / 4, height / 4));\n\n      var link = svg.append(\"g\")\n          .attr(\"class\", \"links\")\n          .selectAll(\"line\")\n          .data(graph.links)\n          .enter().append(\"line\")\n          .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n          .style(\"stroke\", function(d) { \n              // if(d.value > 0.6)\n              //   return linkColors[0];\n              // else if (d.value > 0.4)\n              //   return linkColors[1]; \n          \t\treturn color(d.value); })\n          \t\t//return \"#87CEEB\"; })\n          //.attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"stroke-width\", function(d) { return ;\n              // if(d.value > 0.6)\n              //   return (d.value * 5);\n              // else if (d.value > 0.4)\n              //   return (d.value * 3);\n           });\n\n          // link.append(\"title\")\n          //   .text(function(d) {\n          //     return (\"Score:\" + d.value);  \n          //   });\n\n        var edgepaths = svg.append(\"g\")\n            .selectAll(\".edgepath\")\n            .data(graph.links)\n            .enter()\n            .append('path')\n            .attrs({\n                'class': 'edgepath',\n                'fill-opacity': 0,\n                'stroke-opacity': 0,\n                'id': function (d, i) {return 'edgepath' + i}\n            })\n            .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n            .style(\"pointer-events\", \"none\");\n\n        var edgelabels = svg.append(\"g\")\n            .selectAll(\".edgelabel\")\n            .data(graph.links)\n            .enter()\n            .append('text')\n            .style(\"pointer-events\", \"none\")\n            .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n            .attrs({\n                'class': 'edgelabel',\n                'id': function (d, i) {return 'edgelabel' + i},\n                'font-size': 12,\n                'fill': '#aaa'\n            });\n\n        edgelabels.append('textPath')\n            .attr('xlink:href', function (d, i) {return '#edgepath' + i})\n            .style(\"text-anchor\", \"middle\")\n            .style(\"pointer-events\", \"none\")\n            .attr(\"startOffset\", \"50%\")\n            .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n            .text(function (d) {return d.value});\n  \n\n      var node = svg.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .selectAll(\"circle\")\n          .data(graph.nodes)\n          .enter().append(\"circle\")\n          .attr(\"r\", 15)\n          .attr(\"fill\", function(d) { return color(d.group); })\n          .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n            .call(d3.drag()\n                .on(\"start\", dragstarted)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragended));\n\n        var label = svg.append(\"g\")\n                    .attr(\"class\", \"labels\")\n                    .selectAll(\"text\")\n                    .data(graph.nodes)\n                    .enter().append(\"text\")\n                    .attr(\"class\", \"label\")\n                    .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n                    .text(function(d) { return d.id; });\n\n        // node.append(\"title\")\n        //     .text(function(d) {\n        //       return (\"ID: \" + d.id);  \n        //     });\n\n        simulation\n            .nodes(graph.nodes)\n            .on(\"tick\", ticked);\n\n        simulation.force(\"link\")\n            .links(graph.links);\n\n      // var legend = svg.selectAll(\".legend\")\n      //               .data(linkColors)\n      //               .enter().append(\"g\")\n      //               .attr(\"class\", \"legend\")\n      //               .attr(\"transform\", function(d, i) { return \"translate(0,\" + i * 20 + \")\"; });\n\n      //   if (graph.links.length != 0) {\n      //     legend.append(\"rect\")\n      //         .attr(\"x\", width - 120)\n      //         .attr(\"y\", 15 )\n      //         .attr(\"width\", 18)\n      //         .attr(\"height\", 3)\n      //         .style(\"fill\", function(d,i) { return linkColors[i];});\n\n      //     legend.append(\"text\")\n      //         .attr(\"x\", width - 8)\n      //         .attr(\"y\", 15)\n      //         .attr(\"dy\", \".35em\")\n      //         .style(\"text-anchor\", \"end\")\n      //         .text(function(d, i) { return (i === 0) ? \"score [0.6 - 1]\" :\"score [0.4 - 0.6]\";; });\n      //   }\n\n        function ticked() {\n          link\n              .attr(\"x1\", function(d) { return d.source.x; })\n              .attr(\"y1\", function(d) { return d.source.y; })\n              .attr(\"x2\", function(d) { return d.target.x; })\n              .attr(\"y2\", function(d) { return d.target.y; });\n\n          node\n              .attr(\"cx\", function(d) { return d.x; })\n              .attr(\"cy\", function(d) { return d.y; });\n\n          label\n              .attr(\"x\", function(d) { return d.x - 12; })\n              .attr(\"y\", function (d) { return d.y + 5; });\n\n          edgepaths.attr('d', function (d) {\n            return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;\n          });\n\n          edgelabels.attr('transform', function (d) {\n            if (d.target.x < d.source.x) {\n                var bbox = this.getBBox();\n                rx = bbox.x + (bbox.width / 2);\n                ry = bbox.y + (bbox.height / 2) ;\n                return 'rotate(180 ' + rx + ' ' + ry + ')';\n            }\n            else {\n                return 'rotate(0)';\n            }\n          });\n        }\n\n      function dragstarted(d) {\n        if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n\n      function dragended(d) {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n  }\n\nvar networkChartData1 = {\n      \"nodes\": [\n          {\"id\": \"D210\", \"group\":1, \"filter\": 0},\n          {\"id\": \"TC118\", \"group\":2, \"filter\": 0},\n          {\"id\": \"TC115\", \"group\":2, \"filter\": 1},\n          {\"id\": \"TC10\", \"group\":2, \"filter\": 0},\n          {\"id\": \"R251\", \"group\":3, \"filter\": 1},\n          {\"id\": \"R101\", \"group\":3, \"filter\": 0}\n      ],\n      \"links\": [\n          {\"source\": \"D210\", \"target\": \"TC118\", \"value\": 10, \"filter\": 0},\n          {\"source\": \"D210\", \"target\": \"TC115\", \"value\": 5, \"filter\": 0},\n          {\"source\": \"D210\", \"target\": \"TC10\", \"value\": 1, \"filter\": 0},\n          {\"source\": \"TC118\", \"target\": \"R251\", \"value\": 10, \"filter\": 0},\n          {\"source\": \"TC115\", \"target\": \"R251\", \"value\": 10, \"filter\": 1},\n          {\"source\": \"TC10\", \"target\": \"R101\", \"value\": 10, \"filter\": 0},\n          {\"source\": \"TC10\", \"target\": \"R251\", \"value\": 5, \"filter\": 0}\n      ]\n    }\n\n  // Function to draw a network graph among artifacts\n  // On clicking of a defect in bubble chart: defect -> testcase -> requirement relation will be shown\n  // On clicking of a testcase in bubble chart: testcase -> requirement relation will be shown\n  function drawUpdatedNetworkGraph(graph){\n  \t\n      // remove previous chart if any\n      d3.selectAll('svg').remove();\n      //alert(JSON.stringify(graph));\n\n      //graph = networkChartData1;\n      var width=940,\n          height=430;\n\n      var linkColors = [\"green\", \"cyan\"];\n\n      var svg = d3.select(\"#chartArea\").append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n\n      // svg.append('defs').append('marker')\n      //   .attrs({'id':'arrowhead',\n      //       'viewBox':'-0 -5 10 10',\n      //       'refX':20,\n      //       'refY':0,\n      //       'orient':'auto',\n      //       'markerWidth':13,\n      //       'markerHeight':13,\n      //       'xoverflow':'visible'})\n      //   .append('svg:path')\n      //   .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n      //   .attr('fill', '#aaa')\n      //   .style('stroke','none');\n\n      var color = d3.scaleOrdinal(d3.schemeCategory20);\n\n      var simulation = d3.forceSimulation()\n          .force(\"link\", d3.forceLink().id(function(d) { return d.id; }).distance(150).strength(0.1))\n          .force(\"charge\", d3.forceManyBody())\n          .force(\"center\", d3.forceCenter(width / 4, height / 4));\n\n      var link = svg.append(\"g\")\n          .attr(\"class\", \"links\")\n          .selectAll(\"line\")\n          .data(graph.links)\n          .enter().append(\"line\")\n          .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n          .style(\"stroke\", function(d) { \n              if(d.filter == 0)\n                return \"#DCDCDC\";\n              else\n                //return linkColors[1]; \n          \t\treturn color(d.value);})\n          //.attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"stroke-width\", function(d) { return ;\n              // if(d.value > 0.6)\n              //   return (d.value * 5);\n              // else if (d.value > 0.4)\n              //   return (d.value * 3);\n           });\n\n          // link.append(\"title\")\n          //   .text(function(d) {\n          //     return (\"Score:\" + d.value);  \n          //   });    \n\n      var edgepaths1 = svg.append(\"g\")\n            .selectAll(\".edgepath\")\n            .data(graph.links)\n            .enter()\n            .append('path')\n            .attrs({\n                'class': 'edgepath',\n                'fill-opacity': 0,\n                'stroke-opacity': 0,\n                'id': function (d, i) {return 'edgepath' + i}\n            })\n            .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n            .style(\"pointer-events\", \"none\");\n\n        var edgelabels1 = svg.append(\"g\")\n            .selectAll(\".edgelabel\")\n            .data(graph.links)\n            .enter()\n            .append('text')\n            .style(\"pointer-events\", \"none\")\n            .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n            .attrs({\n                'class': 'edgelabel',\n                'id': function (d, i) {return 'edgelabel' + i},\n                'font-size': 12,\n                'fill': '#aaa'\n            });\n\n        edgelabels1.append('textPath')\n            .attr('xlink:href', function (d, i) {return '#edgepath' + i})\n            .style(\"text-anchor\", \"middle\")\n            .style(\"pointer-events\", \"none\")\n            .attr(\"startOffset\", \"50%\")\n            .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n            .text(function (d) {return d.value});\n  \n\n      var node = svg.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .selectAll(\"circle\")\n          .data(graph.nodes)\n          .enter().append(\"circle\")\n          .attr(\"r\", 13)\n          .attr(\"fill\", function(d) { \n          \tif ( d.filter == 0 ){\n          \t\treturn \"#DCDCDC\";}\n          \telse\n          \t\treturn color(d.group); \n            })\n          .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n            .call(d3.drag()\n                .on(\"start\", dragstarted)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragended));\n\n        var label = svg.append(\"g\")\n                    .attr(\"class\", \"labels\")\n                    .selectAll(\"text\")\n                    .data(graph.nodes)\n                    .enter().append(\"text\")\n                    .attr(\"class\", \"label\")\n                    .attr(\"transform\", function(d) { return \"translate(\" + width / 4 + \",\" + height / 4 + \")\"; })\n                    .text(function(d) { return d.id; });\n\n        // node.append(\"title\")\n        //     .text(function(d) {\n        //       return (\"ID: \" + d.id);  \n        //     });\n\n        simulation\n            .nodes(graph.nodes)\n            .on(\"tick\", ticked);\n\n        simulation.force(\"link\")\n            .links(graph.links);\n\n      // var legend = svg.selectAll(\".legend\")\n      //               .data(linkColors)\n      //               .enter().append(\"g\")\n      //               .attr(\"class\", \"legend\")\n      //               .attr(\"transform\", function(d, i) { return \"translate(0,\" + i * 20 + \")\"; });\n\n      //   if (graph.links.length != 0) {\n      //     legend.append(\"rect\")\n      //         .attr(\"x\", width - 120)\n      //         .attr(\"y\", 15 )\n      //         .attr(\"width\", 18)\n      //         .attr(\"height\", 3)\n      //         .style(\"fill\", function(d,i) { return linkColors[i];});\n\n      //     legend.append(\"text\")\n      //         .attr(\"x\", width - 8)\n      //         .attr(\"y\", 15)\n      //         .attr(\"dy\", \".35em\")\n      //         .style(\"text-anchor\", \"end\")\n      //         .text(function(d, i) { return (i === 0) ? \"score [0.6 - 1]\" :\"score [0.4 - 0.6]\";; });\n      //   }\n\n        function ticked() {\n          link\n              .attr(\"x1\", function(d) { return d.source.x; })\n              .attr(\"y1\", function(d) { return d.source.y; })\n              .attr(\"x2\", function(d) { return d.target.x; })\n              .attr(\"y2\", function(d) { return d.target.y; });\n\n          node\n              .attr(\"cx\", function(d) { return d.x; })\n              .attr(\"cy\", function(d) { return d.y; });\n\n          label\n              .attr(\"x\", function(d) { return d.x - 12; })\n              .attr(\"y\", function (d) { return d.y + 5; });\n\n          edgepaths1.attr('d', function (d) {\n            return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;\n          });\n\n          edgelabels1.attr('transform', function (d) {\n            if (d.target.x < d.source.x) {\n                var bbox = this.getBBox();\n                rx = bbox.x + (bbox.width / 2);\n                ry = bbox.y + (bbox.height / 2) ;\n                return 'rotate(180 ' + rx + ' ' + ry + ')';\n            }\n            else {\n                return 'rotate(0)';\n            }\n          });\n        }\n\n      function dragstarted(d) {\n      \tif (d.filter != 0){\n        \tif (!d3.event.active) simulation.alphaTarget(0.3).restart();\n        \td.fx = d.x;\n        \td.fy = d.y;\n        }\n      }\n\n      function dragged(d) {\n      \tif (d.filter != 0){\n        \td.fx = d3.event.x;\n        \td.fy = d3.event.y;\n        }\n      }\n\n      function dragended(d) {\n      \tif (d.filter != 0){\n        \tif (!d3.event.active) simulation.alphaTarget(0);\n        \td.fx = null;\n        \td.fy = null;\n        }\n      }\n  }\n\n  // Function to close network graph and go back to original bubble chart\n  function closeNetworkChart() {\n    $('#search').val('');\n    showArtifact(storedData);\n  }\n</script>\n\n<body class=\"body\">\n  <div id=\"header\" class=\"header\">\n    Watson | <subHeader>Cognitive Robot</subHeader>\n  </div>\n  <br/>\n\n  <div id=panel class=\"panel\">\n  \t<div class=\"searchBox\">\n  \t\t<input type=\"search\" id=\"search\" name=\"search\" autofocus=\"autofocus\" placeholder=\"What do you want to search\" value=\"\"> </input>\n    \t<!-- <select name=\"options\" id=\"options\"> </select> -->\n  \t</div>\n  \n  \t<!-- <div id=\"searchButton\" style=\"border:1px solid white; text-align: center;\"> -->\n  \t<div id=\"SearchButton\" class=\"searchButton\">\n    \t<input id=\"button\" type=\"button\" class = \"w3-button w3-green w3-round\" style=\"align:center;\" value = \"Search\" onclick=\"doSearch()\"> </input>\n  \t</div>\n  </div>\n  <br/>\n\n  <div id=\"chart\" class=\"chartDiv\">\n\n    <div class=\"chartHeader\">\n\n      <div id=\"labelHeading\" class=\"labelHeading\"> </div>\n\n      <!-- <div id=\"arrowIcon\" class=\"arrowIcon\"> \n        <input id=\"arrowButton\" type=\"button\" value = \"<\" onclick=\"showPreviousChart()\"> </input>\n      </div> -->\n\n      <!-- <div id=\"insightsOption\" class=\"insightsOption\"> \n        <select name=\"insights\" id=\"insights\"> </select>\n      </div>\n        \n      <div id=\"goIcon\" class=\"goIcon\"> \n        <input id=\"goButton\" type=\"button\" value = \"Go\" onclick=\"drawInsightChart()\"> </input> \n      </div> -->\n\n      <div id=\"closeIcon\" class=\"closeIcon\"> \n        <input id=\"closeButton\" type=\"button\" value = \"X\" onclick=\"closeNetworkChart()\"> </input>\n      </div>\n\n    </div>\n\n    <div id=\"chartArea\" class=\"chartArea\"> </div>\n\n  </div>\n\n</body>\n\n</html>","x":510,"y":340,"wires":[["b96fd103.29167"]]}]
